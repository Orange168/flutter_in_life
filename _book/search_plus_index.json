{"./":{"url":"./","title":"前言","keywords":"","body":""},"Chapter1/":{"url":"Chapter1/","title":"第一章 Flutter 入门基础及知识积累 ","keywords":"","body":"第一章 Flutter 入门基础及知识积累第一章 Flutter 入门基础及知识积累 "},"Chapter1/1.Flutter环境搭建.html":{"url":"Chapter1/1.Flutter环境搭建.html","title":"第1节 Flutter环境搭建","keywords":"","body":"第1节 Flutter环境搭建MAC环境配置Brew 安装获取install文件并编辑安装替换homebrew源brew更新设置 bintray镜像TreeviewCopyright © aleen42 all right reserved, powered by aleen42 第1节 Flutter环境搭建 MAC环境配置 Brew 安装 获取install文件并编辑 安装 替换homebrew源 brew更新 设置 bintray镜像 第1节 Flutter环境搭建 Flutter官网帮助文档(English)：https://flutter.io/docs/get-started/install 【全系统安装】 【flutterChina】 入门: 在macOS上搭建Flutter开发环境 Flutter SDK Download MAC环境配置 #flutter configuration export FLUTTER_HOME= export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn export PATH=${PATH}:${GRADLE_HOME}/bin:${FLUTTER_HOME}/bin Brew 安装 参考 来源 获取install文件并编辑 cd ~ curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install >> brew_install 编辑brew_install文件 #!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby # This script installs to /usr/local only. To install elsewhere you can just # untar https://github.com/Homebrew/brew/tarball/master anywhere you like or # change the value of HOMEBREW_PREFIX. HOMEBREW_PREFIX = \"/usr/local\".freeze HOMEBREW_REPOSITORY = \"/usr/local/Homebrew\".freeze HOMEBREW_CACHE = \"#{ENV[\"HOME\"]}/Library/Caches/Homebrew\".freeze HOMEBREW_OLD_CACHE = \"/Library/Caches/Homebrew\".freeze #BREW_REPO = \"https://github.com/Homebrew/brew\".freeze BREW_REPO = \"git://mirrors.ustc.edu.cn/brew.git\".freeze #CORE_TAP_REPO = \"https://github.com/Homebrew/homebrew-core\".freeze CORE_TAP_REPO = \"git://mirrors.ustc.edu.cn/homebrew-core.git\".freeze 注释掉BREW_REPO = \"https://github.com/Homebrew/brew\".freeze和CORE_TAP_REPO = \"https://github.com/Homebrew/homebrew-core\".freeze 修改为BREW_REPO = \"git://mirrors.ustc.edu.cn/brew.git\".freeze和CORE_TAP_REPO = \"git://mirrors.ustc.edu.cn/homebrew-core.git\".freeze 安装 /usr/bin/ruby ~/brew_install 运行修改了的brew_install文件。 替换homebrew源 替换homebrew默认源 cd \"$(brew --repo)\" git remote set-url origin git://mirrors.ustc.edu.cn/brew.git 替换homebrew-core源 cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git brew更新 brew update 设置 bintray镜像 echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile source ~/.bash_profile "},"Chapter1/2.Dart语法从入门到放弃.html":{"url":"Chapter1/2.Dart语法从入门到放弃.html","title":"第2节 Dart语法从入门到放弃","keywords":"","body":"第2节 Dart语法从入门到放弃2.1 Dart 语言特点2.2 变量与常量2.3 数组/list/sets/map2.4 函数2.5 运算符2.6 流程控制2.7 类2.7.1 构造方法2.7.2 继承2.7.3 set get2.7.4 抽象类2.7.5 枚举2.7.6 合并两个类（mixins)2.7.7 静态成员变量和静态成员方法2.8 异步2.9 关键字2.10 Extension2.11 异常TreeviewCopyright © aleen42 all right reserved, powered by aleen42 第2节 Dart语法从入门到放弃 2.1 Dart 语言特点 2.2 变量与常量 2.3 数组/list/sets/map 2.4 函数 2.5 运算符 2.6 流程控制 2.7 类 2.7.1 构造方法 2.7.2 继承 2.7.3 set get 2.7.4 抽象类 2.7.5 枚举 2.7.6 合并两个类（mixins) 2.7.7 静态成员变量和静态成员方法 2.8 异步 2.9 关键字 2.10 Extension 2.11 异常 第2节 Dart语法从入门到放弃 参考博文： http://www.idccyy.cn/news/content/232.html 【基本语法】 2.1 Dart 语言特点 Dart中，一切(数字类型、方法、null等)都是对象 Dart支持范型，List表示一个整型的数据列表，List则是一个对象的列表，其中可以装任意对象 Dart支持顶层方法（如main方法），也支持类方法或对象方法，同时你也可以在方法内部创建方法 Dart支持顶层变量，也支持类变量或对象变量 Dart没有public protected private等关键字， Dart中若某个变量以下划线_ 开头，代表这个变量在库中是私有的 2.2 变量与常量 var a = 1; //变量,自动推断其数据类型 dynamic c = 0.5; //对象,自动推断其数据类型 const Num1 = 10; // const赋值必须是编译时常量，编译时就确定值了 2.3 数组/list/sets/map var arr = [1, 2, 3, 4, 5]; //自动推断为 数字数组 List arr2 = ['hello', 'world', \"123\", \"456\"]; //字符串数组 List arr3 = [1, true, 'haha', 1.0];//对象数组 //list 可能是null var list; var list2 = [0, ...?list]; assert(list2.length == 1); List 的特殊用法 //使用三元表达式 var nav = [ 'Home', 'Furniture', 'Plants', promoActive? 'About':'Outlet']; //list 内使用 for 循环 var listOfInts = [1, 2, 3]; var listOfStrings = [ '#0', for (var i in listOfInts) '#$i']; assert(listOfStrings[1] == '#1'); 2.3.1 sets 容器元素唯一 按顺序添加，默认是LinkedHashSet 实现 简单操作 var halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'}; halogens.add('astatine'); halogens.forEach((el) => print(el)); 2.3.2 Maps var gifts = { 'first': 'partridge', 'second': 'turtledoves', 'fifth': 'golden rings'}; assert(gifts['first'] == 'partridge'); //增加键值对 gifts['fourth'] = 'calling birds'; //遍历 gifts.forEach((key,value) => print('key: $key, value: $value')); 2.4 函数 函数本身都是对象，类型是function,故可以作为一个参数传递 函数的返回值 //声明函数返回值类型 int add(int a, int b){ return a + b; } //不声明函数返回值类型 add2(int a, int b){ return a + b; } // return 返回语句的简写： => add3(a,b) => a + b; 参数 sayHello1({String name}) { print(\"这是一个有 命名参数的函数： $name\"); } sayHello2({name: String}) { print(\"带 命名参数 的函数的第二种写法：$name\"); } sayHello3({@required String name}) { print(\"必须穿参数，否则报错：$name\"); } //位置参数用[] 包裹，可传可不传，放在参数列表的最后，可以是多个 sayHello(String name, int age, [String a, int b]){ if(a != null){ sb.write(\"这是a: $a\"); } } //带默认参数 String sayHello(String username,[String sex='男',int age]){ } String printUserInfo(String username,{int age,String sex='男'}){ //行参 if(age!=null){ return \"姓名:$username---性别:$sex--年龄:$age\"; } return \"姓名:$username---性别:$sex--年龄保密\"; } 函数的一些特殊用法 函数作为参数传入 void main(){ var arr = [1,2,3]; arr.forEach(printNum); } printNum(int param){ print('$param'); } // f 是一个函数 void forEach(void f(E element)) { for (E element in this) f(element); } 函数变量写法 void main(){ var f1 = printNum; Function f2 = printNum; var f3 = (int a) => print(\"a = $a\"); f1(1); // 1 f2(2); // 2 f3(6); // a = 6 } printNum(int param){ print('$param'); } 匿名函数(和Java类似) void main(){ myTest((params){ print(params); }); var callback = (params){ print(params); }; myTest(callback); myTest(print); } myTest(Function callback){ callback(\"you are wonderful\"); //callback 匿名函数 } 闭包Function closureFunc() { var name = \"Flutter\"; // name 是一个被 init 创建的局部变量 void displayName() { // displayName() 是内部函数,一个闭包 print(name); // 使用了父函数中声明的变量 } return displayName; } //调用 var myFunc = closureFunc(); //（1） // 执行displayName函数 myFunc(); // 输出 ==> flutter 函数的简化写法 String hello(var name ) => 'hello, $name'; 2.5 运算符 is and is! var s = \"hello\"; var num = 6； print(s is String); // true is运算符用于判断变量是某个类型的数据 print(num is! String); // true is!运算符用于判断变量不是某个类型的数据 取整 int k = 1; int j = 2; print(k ~/ j); // 0 '~/'运算符 取整 强转 //as 运算符 将对象转换为特定类型 if(emp is Person){ //如果 emp 是 Person 类型 赋值 emp.firstName = \"ABC\"; } //如果 emp 不是 person类型 或为 空，上面什么都不做 //下方代码：如果emp为空 或不是Person类型，将抛出异常；如果emp是Person类型，给其赋值； (emp as Person).firstName = \"ABC\"; ?? var str1 = \"hello\", str2 = null; print(str1?.length); // 5 若 str1 有length 属性 则忽略'?'的作用 print(str2?.length); // null 若 str2 没有length的属性 则返回null ..级联 使用'..'运算符调用对象的方法或成员变量，可以连续使用'..'运算符;但不能再返回 void 上构造级联 示例： var button = queaySelector('#confirm'); button.text = 'Confirm'; button.classes.add('important'); button.onClick.listen((e) => window.alert('Confirmed!')); 等价于： querySelector('#confirm') ..text = 'Confirm' ..classes.add('important') ..onClick.listen((e) => window.alert('Confirmed!')); 也可以嵌套级联： final addressBook = (AddressBookBuilder() ..name = 'jenny' ..email = 'jenny@example.com' ..phone = (PhoneNumberBuilder() ..number = '415-555-0100' ..label = 'home') .build()) .build(); 注意：在返回实际对象的函数上构造级联要小心返回的是否是void,在void上构造级联会报错 var sb = StringBuffer(); sb.write('foot') // 此时返回void ..write('bar'); //在void上构造级联会报错 2.6 流程控制 for (var i in List){ print (i); } try{ 1 ~/ 0; } on IntegerDivisionByZeroException { // 铺货指定类型的异常 print(\"error\"); } finally{ print(\"over\"); } 一些简化写法 list.forEach((i) => print(i)); list.where((i) =>i % 2 == 0).forEach((i) => print(i)); 2.7 类 2.7.1 构造方法 Dart之 构造方法简单分类 Dart2之类与构造方法 普通 方法构造 const 构造 factory构造 class Logger { final String name; static final Map _cache = {}; factory Logger(String name) { if (_cache.containsKey(name)) { return _cache[name]; } else { final logger = Logger._internal(name); _cache[name] = logger; return logger; } } Logger._internal(this.name); void log(String msg) { print(msg); } } class Point{ num x,y; Point(this.x,this.y); //类的命名构造方法 Point.origin(){ x=0; y=0; } } // var p1 = new Point.origin(); 案例1： Translations(String defaultLocaleStr) : assert(defaultLocaleStr != null && trim(defaultLocaleStr).isNotEmpty), defaultLocaleStr = trim(defaultLocaleStr), defaultLanguageStr = trim(defaultLocaleStr).substring(0, 2), translations = Map>(); 2.7.2 继承 class Father { String name; Father.fromJson(Map data){ //父类中没有默认构造方法，只有这一个命名构造方法 print(\"这是父类的fromJson方法\"); } } class Child extends Father{ Child.fromJson(Map data) : super.fromJson(data){ print(\"这是子类的fromJson方法\"); } } void main(){ Map map = new Map(); Child child = new Child.fromJson(map); // 只能用fromJson进行初始化 } //out I/flutter (22196): 这是父类的fromJson方法 I/flutter (22196): 这是子类的fromJson方法 2.7.3 set get class Rectangle { num left, top, width, height; //构造方法 Rectangle(this.left, this.top, this.width, this.height); //为 right 和 bottom两个成员变量提供 getter 和 setter 方法 num get right => left + width; set right(num value) => left = value - width; num get bottom => top + height; set bottom(num value) => top = value - height; } //设置 void main(){ Rectangle rect = new Rectangle(10, 10, 10, 10); rect.right = 10; // 调用 set var rect.right; // 调动 get } 2.7.4 抽象类 abstract class Doer { //使用 abstract 修饰的类，就是抽象类 void doSomething(); //没有方法体的方法 就是抽象方法，抽象方法需要子类去实现 void greet(){ // 有方法体的方法，是普通的 非抽象方法 print(\"hello world!\"); } } 2.7.5 枚举 enum Color { red, green, blue} //枚举中的每个值都有一个索引 assert(Color.red.index == 0); assert(Color.green.index == 1); assert(Color.blue.index == 2); 2.7.6 合并两个类（mixins) class A{ a(){ print(\" 这是 A 的 a 方法\"); } } class B{ b(){ print(\" 这是 B 的 b 方法\"); } } class C = A with B; //使用with 关键字，表示 类C 是由 类A 和 类B 混合而构成的 main(){ C c = new C(); C.a(); // 这是 A 的 a 方法 C.b(); // 这是 B 的 b 方法 } 2.7.7 静态成员变量和静态成员方法 class Cons { static const name = \"张三\"; static sayHello(){ print(\"hello, 这是 ${Cons.name}\"); } } main(){ Cons.sayHello(); // hello, 这是 张三 print(Cons.name);//张三 } 2.8 异步 2.9 关键字 with 提供类的方法给其他类使用，当属性和方法重复时，以当前类为准 Operator 重载 Dart operator重载操作符介绍 可以重载的操作符 =、()、[]、以及 -> abstract class ITranslations { Map> get translations; String get defaultLocaleStr; String get defaultLanguageStr; int get length; //重载[] Map operator [](String key) => translations[key]; } //重载 + Translations operator +(Map translations) { assert(this.translations != null); // --- var defaultTranslation = translations[defaultLocaleStr]; if (defaultTranslation == null) throw TranslationsException(\"No default translation for '$defaultLocaleStr'.\"); String key = _getKey(defaultTranslation); this.translations[key] = translations; return this; } 可以重载的操作符 | | / | ^ | []= | | = | * | > | == | 2.10 Extension 环境配置pubspec.yaml sdk 2.6.0开始 支持 environment: sdk: \">=2.6.0-dev ext.dart extension StringExtension on String{ /// 是否是电话号码 bool get isMobileNumber { if(this?.isNotEmpty != true) return false; return RegExp(r'^((13[0-9])|(14[5,7,9])|(15[^4])|(18[0-9])|(17[0,1,3,5,6,7,8])|(19)[0-9])\\d{8}$').hasMatch(this); } } 使用直接导入 import './ext.dart'; 注解: 可以通过this来访问string 中原有的其它方法 国际化包 i18n extension (https://pub.dev/packages/i18n_extension) 【重点回顾】 时间扩展包 Time extension (https://pub.dev/packages/time) Dartx extension 这个里面是对dart的常用类型提供了很多便捷函数。看看里面的文档，很多extension都不需要自己实现啦 (https://pub.dev/packages/dartx) 2.11 异常 try { file.readAsStringSync(); } on FileSystemException catch (e) { print('exception: $e'); } catch (e, s) { //其余类型 print('Exception details:\\n $e'); print('Stack trace:\\n $s'); // throw FormatException('Expected at least 1 section'); //抛给上一级处理 rethrow; }finally{ //资源释放 } "},"Chapter1/3.Flutter 命令详解.html":{"url":"Chapter1/3.Flutter 命令详解.html","title":"第3节 Flutter 命令详解","keywords":"","body":"第2节 Flutter 命令详解1.1 build2.2 dependence2.3 ConfigTreeviewCopyright © aleen42 all right reserved, powered by aleen42 第2节 Flutter 命令详解 1.1 build 2.2 dependence 2.3 Config 第2节 Flutter 命令详解 -h, --help Print this usage information. -v, --verbose Noisy logging, including all shell commands executed. If used with --help, shows hidden options. -d, --device-id Target device id or name (prefixes allowed). --version Reports the version of this tool. --suppress-analytics Suppress analytics reporting when this command runs. --bug-report Captures a bug report file to submit to the Flutter team. Contains local paths, device identifiers, and log snippets. --packages Path to your \".packages\" file. (required, since the current directory does not contain a \".packages\" file) Available commands: analyze Analyze the project's Dart code. assemble Assemble and build flutter resources. attach Attach to a running application. bash-completion Output command line shell completion setup scripts. build Flutter build commands. channel List or switch flutter channels. clean Delete the build/ and .dart_tool/ directories. config Configure Flutter settings. create Create a new Flutter project. devices List all connected devices. doctor Show information about the installed tooling. drive Runs Flutter Driver tests for the current project. emulators List, launch and create emulators. format Format one or more dart files. help Display help information for flutter. install Install a Flutter app on an attached device. logs Show log output for running Flutter apps. make-host-app-editable Moves host apps from generated directories to non-generated directories so that they can be edited by developers. precache Populates the Flutter tool's cache of binary artifacts. pub Commands for managing Flutter packages. run Run your Flutter app on an attached device. screenshot Take a screenshot from a connected device. test Run Flutter unit tests for the current project. upgrade Upgrade your copy of Flutter. version List or switch flutter versions. Run \"flutter help \" for more information about a command. Run \"flutter help -v\" for verbose help output, including less commonly used options. 1.1 build flutter build apk —help 输出： ${flutter_project}/build/app/outputs flutter build ios 输出目录：${flutter_project}/build/ios/iphoneos/Runner.app 错误1： com.example.flutterApp App Id 错误 Xcode's output: ↳ note: Using new build systemnote: Planning buildnote: Constructing build descriptionerror: Failed to register bundle identifier. The app identifier \"com.example.flutterApp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again. (in target 'Runner' from project 'Runner')error: No profiles for 'com.example.flutterApp' were found: Xcode couldn't find any iOS App Development provisioning profiles matching 'com.example.flutterApp'. (in target 'Runner' from project 'Runner') 分析： 苹果IOS每个新建的APP Id都需要通过云端验证其唯一性，不唯一无法编译成功 解决：Xcode -> Runner(点击)-> signing & Capabilities -> Bundle Identifier(修改) 2.2 dependence flutter upgrade 升级 Flutter SDK（此命令会同时更新 Flutter SDK 和你的 Flutter 项目依赖包） flutter packages get 获取项目所有的依赖包（只更新项目依赖包，不包括 Flutter SDK） flutter packages upgrade 获取项目所有依赖包的最新版本（只更新项目依赖包，不包括 Flutter SDK） 2.3 Config flutter devices找不到Android 设备 $ flutter config --android-sdk /path/to/android/sdk $ flutter config --android-studio-dir /path/to/android/studio flutter config --gradle-dir /path/to/gradle "},"Chapter1/4.依赖管理.html":{"url":"Chapter1/4.依赖管理.html","title":"第4节 依赖管理","keywords":"","body":"第4节 依赖管理TreeviewCopyright © aleen42 all right reserved, powered by aleen42 第4节 依赖管理 3.1 如何发布依赖到仓库 第4节 依赖管理 库：Libraries, Dart提供了很多功能库，只需要导入对应包即可 1.导入功能包 import 'dart:html'; 2.引用其他.dart文件 使用相对路径引用：./ 或 ../ util.dart文件： int add(int a, int b){ return a + b; } demo.dart文件 import './util.dart' //俩文件在同一目录下 main(){ print(add(1,2)); } 3.为导入的包设置一个别名 import 'package:lib1/lib1.dart'; import 'package:lib2/lib2.dart' as lib2; // 使用 as 关键字 为包设置一个别名 // lib1 包中的 元素 Element element1 = Element(); // lib2 包中的元素 lib2.Element element2 = lib2.Element(); 4.导入包中的部分功能 import 'package:lib1/lib1.dart' show foo; // 只导入lib1包中的 foo import 'package:lib1/lib1.dart' hide foo; // 导入除了foo的所有其他部分 5.懒加载导入包 import 'package:greetings/hello.dart' deferred as hello; // 使用 deferred as 让hello包在使用时才加载 3.1 如何发布依赖到仓库 如何发布依赖到仓库 引用案例 dependencies: dartx: ^[version] import 'package:dartx/dartx.dart'; "},"Chapter1/5.dart 常用命令.html":{"url":"Chapter1/5.dart 常用命令.html","title":"第5节 dart 常用命令","keywords":"","body":"5.dart 常用命令5.dart 常用命令 dart --enable-asserts --enable-vm-service:53672 ./func.dart --enable-asserts 开启assert assert(text != null) "},"Chapter1/附录.html":{"url":"Chapter1/附录.html","title":"附录","keywords":"","body":"附录参考常用网址第三方库状态管理优秀的UI库TreeviewCopyright © aleen42 all right reserved, powered by aleen42 附录 参考 常用网址 第三方库 状态管理 优秀的UI库 附录 参考 flutter Dart语法 flutter 实战 常用网址 Flutter中文网 掘金Flutter社区 .gitignore flutter Get the Dart SDK 第三方库 状态管理 Bloc 优秀的UI库 flutter_spinkit progressBar "}}